name: Run Pre-Commit Hooks

on:
  workflow_call:
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: ["3.12.8"]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
          virtualenvs-create: true
          version: 2.1.2

      - name: Load Cached Virtual Environment
        id: cached-venv
        uses: actions/cache@v3
        with:
          path: |
            .venv
            poetry.lock
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Install Dependencies
        if: steps.cached-venv.outputs.cache-hit != 'true'
        run: |
          # temporary pyproject without windows platform-specific dependencies
          cp pyproject.toml pyproject.original.toml
          cat pyproject.original.toml | python -c '
          import sys, re
          content = sys.stdin.read()
          content = re.sub(r".*platform\s*=\s*\"win32\".*", "", content)
          content = re.sub(r"pywin32\s*=.*\n", "", content)
          print(content)
          ' > pyproject.toml

          # regenerate lock file, if needed
          if ! poetry check --lock; then
            echo "Lock file is outdated, regenerating..."
            rm -f poetry.lock
            poetry lock --no-cache
          fi

          # install all dependencies including dev and docs
          poetry install --no-interaction --no-root

          # restore original pyproject.toml
          mv pyproject.original.toml pyproject.toml
          poetry env activate

      - name: Get Base SHA
        id: base-sha
        run: |
          BASE_SHA=$(git merge-base origin/main HEAD)
          echo "BASE_SHA=${BASE_SHA}" >> $GITHUB_OUTPUT

      - name: Get Changed Files
        id: changed-files
        run: |
          # Get all changed files between base and HEAD
          FILES=$(git diff --name-only ${{ steps.base-sha.outputs.BASE_SHA }} HEAD)
          echo "all_changed_files=${FILES}" >> $GITHUB_OUTPUT
          echo "any_changed=$( [ -n "$FILES" ] && echo true || echo false )" >> $GITHUB_OUTPUT

      - name: Running Pre-Commit Hooks on Changed Files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Run pre-commit only on changed files
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Running pre-commit hooks on $file"
            SKIP=no-commit-to-branch poetry run pre-commit run --files "$file"
          done
